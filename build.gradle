buildscript {
    ext {
        moduleVersion = project.hasProperty('moduleVersion') ? project.getProperty('moduleVersion') : '1.0.0'
        uploaderUser = project.hasProperty('uploaderUser') ? project.getProperty('uploaderUser') : 'uploader'
        uploaderPassword = project.hasProperty('uploaderPassword') ? project.getProperty('uploaderPassword') : 'Set me with -P'
    }
}

plugins {
    id 'org.ajoberstar.git-publish' version '2.1.1'
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'
apply plugin: 'groovy'

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

jar {
    baseName = 'functions'
    version = "${moduleVersion}"
}

javadoc { failOnError = false }

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'org.perro-creek'
            artifactId 'functions'
            version "${moduleVersion}"

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact sourceJar { classifier = 'sources' }
            artifact javadocJar { classifier = 'javadoc'}

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
        mavenLocal()
    }
}

gitPublish {
    // where to publish to (repo must exist)
    repoUri = 'https://github.com/perro-creek/functions.git'

    // where to fetch from prior to fetching from the remote (i.e. a local repo to save time)
    //referenceRepoUri = 'file:///Users/hringsak/workspace/temp-repo'

    // branch will be created if it doesn't exist
    branch = 'gh-pages'

    // what to publish, this is a standard CopySpec
    contents {
        from(javadoc) {
            into 'api'
        }
    }

    // what to keep in the existing branch (include=keep)
    preserve {
        include '1.0.0/**'
        exclude '1.0.0/temp.txt'
    }

    // message used when committing changes
    commitMessage = 'Publishing a new page' // defaults to 'Generated by gradle-git-publish'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.15'
    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.4'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Utilities for functional programming in Java 8'
            name 'Java 8 Functional Utilities'
            url 'https://github.com/perro-creek/functions'
            organization {
                name 'org.perro-creek.functions'
                url 'https://github.com/perro-creek'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/perro-creek/functions/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/perro-creek/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/perro-creek/functions'
                connection 'scm:git:git://github.com/perro-creek/functions.git'
                developerConnection 'scm:git:ssh://git@github.com:perro-creek/functions.git'
            }
            developers {
                developer {
                    name 'Hringsak'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocalRepository {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}